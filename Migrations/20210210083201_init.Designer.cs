// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyCoreApp.Data;

namespace MyCoreApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210210083201_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MyCoreApp.Models.AccessPoints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Ip");

                    b.Property<string>("Lat");

                    b.Property<string>("Long");

                    b.Property<string>("Name");

                    b.Property<string>("Nasname");

                    b.Property<int?>("Port");

                    b.Property<string>("Secret");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("AccessPoints");
                });

            modelBuilder.Entity("MyCoreApp.Models.Bakiye", b =>
                {
                    b.Property<int>("Bakiyeid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Aciklama");

                    b.Property<string>("Baglanti");

                    b.Property<string>("Baglantitip");

                    b.Property<string>("Ekleyen");

                    b.Property<string>("Gelir");

                    b.Property<string>("Gider");

                    b.Property<string>("Tarih");

                    b.Property<string>("Username");

                    b.HasKey("Bakiyeid");

                    b.ToTable("Bakiye");
                });

            modelBuilder.Entity("MyCoreApp.Models.Basvuru", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Baciklama");

                    b.Property<string>("Badi");

                    b.Property<string>("Badresi");

                    b.Property<string>("Bbildiren");

                    b.Property<string>("Bemail");

                    b.Property<string>("Bftipi");

                    b.Property<string>("Bhakedis");

                    b.Property<string>("Bil");

                    b.Property<string>("Bilce");

                    b.Property<string>("Bpaket");

                    b.Property<string>("Brandevu");

                    b.Property<string>("Bsms");

                    b.Property<string>("Bsmsid");

                    b.Property<string>("Bsonuc");

                    b.Property<string>("Bsoyadi");

                    b.Property<string>("Btc");

                    b.Property<string>("Btelefon1");

                    b.Property<string>("Btelefon2");

                    b.Property<string>("Btelefon3");

                    b.HasKey("id");

                    b.ToTable("Basvuru");
                });

            modelBuilder.Entity("MyCoreApp.Models.BtkNat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BKM");

                    b.Property<string>("BPvc");

                    b.Property<string>("DownByte");

                    b.Property<string>("GIpPBas");

                    b.Property<string>("GIpPBit");

                    b.Property<string>("GercekIp");

                    b.Property<sbyte?>("Imza");

                    b.Property<string>("KullaniciAd");

                    b.Property<string>("OBasTarih");

                    b.Property<string>("OBitTarih");

                    b.Property<string>("ODurum");

                    b.Property<string>("OIpPBas");

                    b.Property<string>("OIpPBit");

                    b.Property<string>("OKod");

                    b.Property<string>("OzelIp");

                    b.Property<string>("ServisNo");

                    b.Property<string>("UpByte");

                    b.HasKey("Id");

                    b.ToTable("BtkNat");
                });

            modelBuilder.Entity("MyCoreApp.Models.Members", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Lastname");

                    b.Property<string>("Mode");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<string>("Photo");

                    b.Property<string>("Tc");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("MyCoreApp.Models.MetroIp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Ipaddress");

                    b.Property<string>("Nasname");

                    b.Property<string>("Ports");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.ToTable("MetroIp");
                });

            modelBuilder.Entity("MyCoreApp.Models.Nas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Community");

                    b.Property<string>("Description");

                    b.Property<string>("Nasname");

                    b.Property<int?>("Ports");

                    b.Property<string>("Secret");

                    b.Property<string>("Server");

                    b.Property<string>("Shortname");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Nas");
                });

            modelBuilder.Entity("MyCoreApp.Models.PacketsInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Download");

                    b.Property<string>("Name");

                    b.Property<int>("Price");

                    b.Property<string>("Sat");

                    b.Property<string>("Traffic");

                    b.Property<string>("Upload");

                    b.HasKey("Id");

                    b.ToTable("PacketsInfo");
                });

            modelBuilder.Entity("MyCoreApp.Models.Radacct", b =>
                {
                    b.Property<long>("Radacctid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Acctauthentic");

                    b.Property<long?>("Acctinputoctets");

                    b.Property<long?>("Acctoutputoctets");

                    b.Property<string>("Acctsessionid");

                    b.Property<uint?>("Acctsessiontime");

                    b.Property<uint?>("Acctstartdelay");

                    b.Property<DateTime?>("Acctstarttime");

                    b.Property<uint?>("Acctstopdelay");

                    b.Property<DateTime?>("Acctstoptime");

                    b.Property<string>("Acctterminatecause");

                    b.Property<string>("Acctuniqueid");

                    b.Property<string>("Btk");

                    b.Property<string>("Calledstationid");

                    b.Property<string>("Callingstationid");

                    b.Property<string>("ConnectinfoStart");

                    b.Property<string>("ConnectinfoStop");

                    b.Property<string>("Framedipaddress");

                    b.Property<string>("Framedprotocol");

                    b.Property<string>("Groupname");

                    b.Property<string>("Nasipaddress");

                    b.Property<string>("Nasportid");

                    b.Property<string>("Nasporttype");

                    b.Property<string>("Realm");

                    b.Property<string>("Servicetype");

                    b.Property<string>("Username");

                    b.Property<string>("Xascendsessionsvrkey");

                    b.HasKey("Radacctid");

                    b.ToTable("Radacct");
                });

            modelBuilder.Entity("MyCoreApp.Models.Radcheck", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attribute");

                    b.Property<string>("Op");

                    b.Property<DateTime?>("Regdate");

                    b.Property<string>("Username");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Radcheck");
                });

            modelBuilder.Entity("MyCoreApp.Models.Radgroupcheck", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attribute");

                    b.Property<string>("Groupname");

                    b.Property<string>("Op");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Radgroupcheck");
                });

            modelBuilder.Entity("MyCoreApp.Models.Radgroupreply", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attribute");

                    b.Property<string>("Groupname");

                    b.Property<string>("Op");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Radgroupreply");
                });

            modelBuilder.Entity("MyCoreApp.Models.Radippool", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Calledstationid");

                    b.Property<string>("Callingstationid");

                    b.Property<DateTime?>("ExpiryTime");

                    b.Property<string>("Framedipaddress");

                    b.Property<string>("Nasipaddress");

                    b.Property<string>("PoolKey");

                    b.Property<string>("PoolName");

                    b.Property<string>("Port");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Radippool");
                });

            modelBuilder.Entity("MyCoreApp.Models.Radpostauth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Authdate");

                    b.Property<string>("Pass");

                    b.Property<string>("Reply");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Radpostauth");
                });

            modelBuilder.Entity("MyCoreApp.Models.Radreply", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attribute");

                    b.Property<string>("Op");

                    b.Property<string>("Username");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Radreply");
                });

            modelBuilder.Entity("MyCoreApp.Models.Radusergroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Groupname");

                    b.Property<int>("Priority");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Radusergroup");
                });

            modelBuilder.Entity("MyCoreApp.Models.Sayi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("KutukSayi");

                    b.Property<int?>("NatSayi");

                    b.Property<string>("Tarih");

                    b.HasKey("Id");

                    b.ToTable("Sayi");
                });

            modelBuilder.Entity("MyCoreApp.Models.Sms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Date");

                    b.Property<string>("Number");

                    b.Property<string>("Sms1");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Sms");
                });

            modelBuilder.Entity("MyCoreApp.Models.Smsbilgi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Dis");

                    b.Property<string>("Smsapi");

                    b.Property<string>("Smsno");

                    b.Property<string>("Smspass");

                    b.Property<string>("Smsuser");

                    b.HasKey("Id");

                    b.ToTable("Smsbilgi");
                });

            modelBuilder.Entity("MyCoreApp.Models.UserInvoices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Expire");

                    b.Property<string>("Kaciklama");

                    b.Property<string>("Kmesaj");

                    b.Property<string>("Mcoid");

                    b.Property<DateTime?>("Otarihi");

                    b.Property<string>("Packet");

                    b.Property<DateTime?>("Peydate");

                    b.Property<int?>("Price");

                    b.Property<string>("Sms");

                    b.Property<string>("Taciklama");

                    b.Property<string>("Taksit");

                    b.Property<string>("Tdurum");

                    b.Property<int?>("Tekrar");

                    b.Property<string>("Tyapan");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("UserInvoices");
                });

            modelBuilder.Entity("MyCoreApp.Models.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Accesspoint");

                    b.Property<string>("Address");

                    b.Property<string>("Adurum");

                    b.Property<string>("Anaadi");

                    b.Property<string>("Anakizliksoyadi");

                    b.Property<string>("Atipi");

                    b.Property<string>("Babaadi");

                    b.Property<int?>("Ciltno");

                    b.Property<string>("Cinsiyet");

                    b.Property<string>("Dogumtarihi");

                    b.Property<string>("Dogumyeri");

                    b.Property<string>("Email");

                    b.Property<string>("Ftipi");

                    b.Property<string>("Kil");

                    b.Property<string>("Kilce");

                    b.Property<string>("Ksahibi");

                    b.Property<string>("Kserino");

                    b.Property<string>("Ktipi");

                    b.Property<int?>("Kutukno");

                    b.Property<string>("Kverildigitarih");

                    b.Property<string>("Kverildigiyer");

                    b.Property<string>("Lastname");

                    b.Property<string>("Mahkoy");

                    b.Property<string>("Meslek");

                    b.Property<string>("Name");

                    b.Property<string>("Osifre");

                    b.Property<string>("Packet");

                    b.Property<int?>("Pasaportno");

                    b.Property<string>("Phone1");

                    b.Property<string>("Phone2");

                    b.Property<string>("Phone3");

                    b.Property<string>("Sabitip");

                    b.Property<int?>("Sayfano");

                    b.Property<int?>("Tadresno");

                    b.Property<string>("Tc");

                    b.Property<string>("Tcadde");

                    b.Property<string>("Tdiskapino");

                    b.Property<string>("Tickapino");

                    b.Property<string>("Til");

                    b.Property<string>("Tilce");

                    b.Property<string>("Tmahalle");

                    b.Property<int?>("Tpostano");

                    b.Property<string>("Unvan");

                    b.Property<string>("Username");

                    b.Property<string>("Uyruk");

                    b.Property<string>("Vergidairesi");

                    b.Property<int?>("Vergino");

                    b.HasKey("Id");

                    b.ToTable("UsersInfo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
